//import { mainnetTokenDetails } from "./mainnetTokenDetails";
//import { testnetTokenDetails } from "./testnetTokenDetails";
import { mainnetChainTokens } from "./mainnet";
import { testnetChainTokens } from "./testnet";
export * from "./types";
export function getTokenMap(network, chain) {
    if (network === "Devnet")
        return;
    if (network === "Mainnet") {
        if (!mainnetChainTokens.has(chain))
            return;
        const chainTokens = mainnetChainTokens.get(chain);
        return Object.fromEntries(chainTokens.map(([key, token]) => [key, { ...token, chain, key }]));
    }
    if (network === "Testnet") {
        if (!testnetChainTokens.has(chain))
            return;
        const chainTokens = testnetChainTokens.get(chain);
        return Object.fromEntries(chainTokens.map(([key, token]) => [key, { ...token, chain, key }]));
    }
    throw "Unsupported network: " + network;
}
export const isEqualCaseInsensitive = (a, b) => {
    return a.toLowerCase() === b.toLowerCase();
};
export function getTokensBySymbol(network, chain, symbol) {
    const tokenMap = getTokenMap(network, chain);
    if (!tokenMap)
        return;
    const foundTokens = Object.entries(tokenMap)
        .filter(([_, token]) => token.symbol === symbol)
        .map((t) => t[1]);
    if (!foundTokens || foundTokens.length === 0)
        return;
    return foundTokens;
}
export function getTokenByKey(network, chain, key) {
    const tokenMap = getTokenMap(network, chain);
    if (!tokenMap)
        return;
    const foundToken = Object.entries(tokenMap).find(([_key]) => key === _key);
    if (!foundToken)
        return;
    return foundToken[1];
}
export function getNativeToken(network, chain) {
    const tokenMap = getTokenMap(network, chain);
    if (!tokenMap)
        return;
    const nativeTokenEntry = Object.entries(tokenMap).find(([, token]) => token.address === "native");
    if (!nativeTokenEntry)
        return;
    return nativeTokenEntry[1];
}
export function getCanonicalToken(network, chain, key) {
    const token = getTokenByKey(network, chain, key);
    if (!token)
        return;
    if (!token.original)
        return token;
    const original = getTokensBySymbol(network, token.original, token.symbol);
    if (!original)
        return;
    // return the the token with this symbol where no `original` field exists
    return original.find((t) => !t.original);
}
// Finds the unique token key for a given chain and address
export function getTokenByAddress(network, chain, address) {
    const tokenMap = getTokenMap(network, chain);
    if (!tokenMap)
        return;
    const foundToken = Object.entries(tokenMap).find(([, token]) => isEqualCaseInsensitive(token.address, address));
    if (!foundToken)
        return;
    return foundToken[1];
}
//# sourceMappingURL=index.js.map