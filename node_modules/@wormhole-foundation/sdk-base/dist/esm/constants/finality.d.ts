import { Chain } from "./chains";
export declare enum ConsistencyLevels {
    Finalized = 1,
    Immediate = 200,
    Safe = 201
}
export declare const safeThreshold: (<K1 extends "Ethereum">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Ethereum" ? {
    readonly Ethereum: 32;
}["Ethereum" & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Ethereum: 32;
}["Ethereum" & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Ethereum: 32;
}["Ethereum" & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => 32 | undefined;
    has: (args_0: string) => boolean;
};
export declare const finalityThreshold: (<K1 extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Algorand" | "Fantom" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Sui" | "Aptos" | "Xpla" | "Sei">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Algorand" | "Fantom" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Sui" | "Aptos" | "Xpla" | "Sei" ? {
    readonly Ethereum: 64;
    readonly Solana: 32;
    readonly Polygon: 512;
    readonly Bsc: 15;
    readonly Fantom: 1;
    readonly Celo: 1;
    readonly Moonbeam: 1;
    readonly Avalanche: 0;
    readonly Sui: 0;
    readonly Algorand: 0;
    readonly Aptos: 0;
    readonly Sei: 0;
    readonly Near: 0;
    readonly Terra: 0;
    readonly Terra2: 0;
    readonly Xpla: 0;
    readonly Injective: 0;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Algorand" | "Fantom" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Sui" | "Aptos" | "Xpla" | "Sei") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Ethereum: 64;
    readonly Solana: 32;
    readonly Polygon: 512;
    readonly Bsc: 15;
    readonly Fantom: 1;
    readonly Celo: 1;
    readonly Moonbeam: 1;
    readonly Avalanche: 0;
    readonly Sui: 0;
    readonly Algorand: 0;
    readonly Aptos: 0;
    readonly Sei: 0;
    readonly Near: 0;
    readonly Terra: 0;
    readonly Terra2: 0;
    readonly Xpla: 0;
    readonly Injective: 0;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Algorand" | "Fantom" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Sui" | "Aptos" | "Xpla" | "Sei") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Ethereum: 64;
    readonly Solana: 32;
    readonly Polygon: 512;
    readonly Bsc: 15;
    readonly Fantom: 1;
    readonly Celo: 1;
    readonly Moonbeam: 1;
    readonly Avalanche: 0;
    readonly Sui: 0;
    readonly Algorand: 0;
    readonly Aptos: 0;
    readonly Sei: 0;
    readonly Near: 0;
    readonly Terra: 0;
    readonly Terra2: 0;
    readonly Xpla: 0;
    readonly Injective: 0;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Algorand" | "Fantom" | "Celo" | "Near" | "Moonbeam" | "Terra2" | "Injective" | "Sui" | "Aptos" | "Xpla" | "Sei") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => 0 | 1 | 15 | 32 | 64 | 512 | undefined;
    has: (args_0: string) => boolean;
};
export declare const blockTime: (<K1 extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" ? {
    readonly Acala: 12000;
    readonly Algorand: 3300;
    readonly Aptos: 4000;
    readonly Arbitrum: 300;
    readonly ArbitrumSepolia: 300;
    readonly Aurora: 3000;
    readonly Avalanche: 2000;
    readonly Base: 2000;
    readonly BaseSepolia: 2000;
    readonly Bsc: 3000;
    readonly Celo: 5000;
    readonly Cosmoshub: 5000;
    readonly Ethereum: 15000;
    readonly Evmos: 2000;
    readonly Fantom: 2500;
    readonly Gnosis: 5000;
    readonly Holesky: 15000;
    readonly Injective: 2500;
    readonly Karura: 12000;
    readonly Klaytn: 1000;
    readonly Kujira: 3000;
    readonly Moonbeam: 12000;
    readonly Near: 1500;
    readonly Neon: 30000;
    readonly Oasis: 6000;
    readonly Optimism: 2000;
    readonly OptimismSepolia: 2000;
    readonly Osmosis: 6000;
    readonly Polygon: 2000;
    readonly Rootstock: 30000;
    readonly Sei: 400;
    readonly Sepolia: 15000;
    readonly Solana: 400;
    readonly Sui: 3000;
    readonly Terra: 6000;
    readonly Terra2: 6000;
    readonly Xpla: 5000;
    readonly Wormchain: 5000;
    readonly Btc: 600000;
    readonly Pythnet: 400;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Acala: 12000;
    readonly Algorand: 3300;
    readonly Aptos: 4000;
    readonly Arbitrum: 300;
    readonly ArbitrumSepolia: 300;
    readonly Aurora: 3000;
    readonly Avalanche: 2000;
    readonly Base: 2000;
    readonly BaseSepolia: 2000;
    readonly Bsc: 3000;
    readonly Celo: 5000;
    readonly Cosmoshub: 5000;
    readonly Ethereum: 15000;
    readonly Evmos: 2000;
    readonly Fantom: 2500;
    readonly Gnosis: 5000;
    readonly Holesky: 15000;
    readonly Injective: 2500;
    readonly Karura: 12000;
    readonly Klaytn: 1000;
    readonly Kujira: 3000;
    readonly Moonbeam: 12000;
    readonly Near: 1500;
    readonly Neon: 30000;
    readonly Oasis: 6000;
    readonly Optimism: 2000;
    readonly OptimismSepolia: 2000;
    readonly Osmosis: 6000;
    readonly Polygon: 2000;
    readonly Rootstock: 30000;
    readonly Sei: 400;
    readonly Sepolia: 15000;
    readonly Solana: 400;
    readonly Sui: 3000;
    readonly Terra: 6000;
    readonly Terra2: 6000;
    readonly Xpla: 5000;
    readonly Wormchain: 5000;
    readonly Btc: 600000;
    readonly Pythnet: 400;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Acala: 12000;
    readonly Algorand: 3300;
    readonly Aptos: 4000;
    readonly Arbitrum: 300;
    readonly ArbitrumSepolia: 300;
    readonly Aurora: 3000;
    readonly Avalanche: 2000;
    readonly Base: 2000;
    readonly BaseSepolia: 2000;
    readonly Bsc: 3000;
    readonly Celo: 5000;
    readonly Cosmoshub: 5000;
    readonly Ethereum: 15000;
    readonly Evmos: 2000;
    readonly Fantom: 2500;
    readonly Gnosis: 5000;
    readonly Holesky: 15000;
    readonly Injective: 2500;
    readonly Karura: 12000;
    readonly Klaytn: 1000;
    readonly Kujira: 3000;
    readonly Moonbeam: 12000;
    readonly Near: 1500;
    readonly Neon: 30000;
    readonly Oasis: 6000;
    readonly Optimism: 2000;
    readonly OptimismSepolia: 2000;
    readonly Osmosis: 6000;
    readonly Polygon: 2000;
    readonly Rootstock: 30000;
    readonly Sei: 400;
    readonly Sepolia: 15000;
    readonly Solana: 400;
    readonly Sui: 3000;
    readonly Terra: 6000;
    readonly Terra2: 6000;
    readonly Xpla: 5000;
    readonly Wormchain: 5000;
    readonly Btc: 600000;
    readonly Pythnet: 400;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => 4000 | 12000 | 3300 | 300 | 3000 | 2000 | 5000 | 15000 | 2500 | 1000 | 1500 | 30000 | 6000 | 400 | 600000 | undefined;
    has: (args_0: string) => boolean;
};
export declare function consistencyLevelToBlock(chain: Chain, consistencyLevel: number, fromBlock?: bigint): bigint;
//# sourceMappingURL=finality.d.ts.map