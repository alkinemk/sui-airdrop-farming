import { Network } from "./networks";
export declare const circleChains: ["Ethereum", "Avalanche", "Optimism", "Arbitrum", "Solana", "Base"], circleChainIds: [0, 1, 2, 3, 5, 6];
export type CircleChain = (typeof circleChains)[number];
export type CircleChainId = (typeof circleChainIds)[number];
export declare const circleNetworks: ["Mainnet", "Testnet"], _: [readonly [readonly ["Ethereum", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"], readonly ["Avalanche", "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e"], readonly ["Arbitrum", "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"], readonly ["Optimism", "0x179522635726710dd7d2035a81d856de4aa7836c"], readonly ["Solana", "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"], readonly ["Base", "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"]], readonly [readonly ["Avalanche", "0x5425890298aed601595a70AB815c96711a31Bc65"], readonly ["Arbitrum", "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63"], readonly ["Ethereum", "0x07865c6e87b9f70255377e024ace6630c1eaa37f"], readonly ["Optimism", "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6"], readonly ["Solana", "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU"], readonly ["Base", "0xf175520c52418dfe19c8098071a252da48cd1c19"]]];
export type CircleNetwork = (typeof circleNetworks)[number];
export declare const circleChainId: (<K1 extends "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base" ? {
    readonly Ethereum: 0;
    readonly Avalanche: 1;
    readonly Optimism: 2;
    readonly Arbitrum: 3;
    readonly Solana: 5;
    readonly Base: 6;
}[("Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Ethereum: 0;
    readonly Avalanche: 1;
    readonly Optimism: 2;
    readonly Arbitrum: 3;
    readonly Solana: 5;
    readonly Base: 6;
}[("Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Ethereum: 0;
    readonly Avalanche: 1;
    readonly Optimism: 2;
    readonly Arbitrum: 3;
    readonly Solana: 5;
    readonly Base: 6;
}[("Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => 0 | 2 | 1 | 6 | 3 | 5 | undefined;
    has: (args_0: string) => boolean;
};
export declare const circleChainIdToChain: (<K1 extends 0 | 2 | 1 | 6 | 3 | 5>(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends 0 | 2 | 1 | 6 | 3 | 5 ? {
    0: "Ethereum";
    1: "Avalanche";
    2: "Optimism";
    3: "Arbitrum";
    5: "Solana";
    6: "Base";
}[(0 | 2 | 1 | 6 | 3 | 5) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    0: "Ethereum";
    1: "Avalanche";
    2: "Optimism";
    3: "Arbitrum";
    5: "Solana";
    6: "Base";
}[(0 | 2 | 1 | 6 | 3 | 5) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    0: "Ethereum";
    1: "Avalanche";
    2: "Optimism";
    3: "Arbitrum";
    5: "Solana";
    6: "Base";
}[(0 | 2 | 1 | 6 | 3 | 5) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: number) => "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base" | undefined;
    has: (args_0: number) => boolean;
};
export declare const circleAPI: (<K1 extends "Mainnet" | "Testnet">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Mainnet" | "Testnet" ? {
    readonly Mainnet: "https://iris-api.circle.com/v1/attestations";
    readonly Testnet: "https://iris-api-sandbox.circle.com/v1/attestations";
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Mainnet: "https://iris-api.circle.com/v1/attestations";
    readonly Testnet: "https://iris-api-sandbox.circle.com/v1/attestations";
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Mainnet: "https://iris-api.circle.com/v1/attestations";
    readonly Testnet: "https://iris-api-sandbox.circle.com/v1/attestations";
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => "https://iris-api.circle.com/v1/attestations" | "https://iris-api-sandbox.circle.com/v1/attestations" | undefined;
    has: (args_0: string) => boolean;
};
export declare const usdcContract: (<K1 extends "Mainnet" | "Testnet", K2 extends keyof ((K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Mainnet" | "Testnet" ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) extends infer T ? T extends keyof ((K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Mainnet" | "Testnet" ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Mainnet" | "Testnet" ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? (K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2) extends keyof {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)][keyof {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] & (K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)][keyof {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] & (K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2)] : {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)][keyof {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] & (K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2)] : never : {
    readonly Mainnet: {
        readonly Ethereum: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
        readonly Avalanche: "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e";
        readonly Arbitrum: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
        readonly Optimism: "0x179522635726710dd7d2035a81d856de4aa7836c";
        readonly Solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v";
        readonly Base: "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913";
    };
    readonly Testnet: {
        readonly Avalanche: "0x5425890298aed601595a70AB815c96711a31Bc65";
        readonly Arbitrum: "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63";
        readonly Ethereum: "0x07865c6e87b9f70255377e024ace6630c1eaa37f";
        readonly Optimism: "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6";
        readonly Solana: "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU";
        readonly Base: "0xf175520c52418dfe19c8098071a252da48cd1c19";
    };
}[("Mainnet" | "Testnet") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string, args_1: string) => "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48" | "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e" | "0xaf88d065e77c8cC2239327C5EDb3A432268e5831" | "0x179522635726710dd7d2035a81d856de4aa7836c" | "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" | "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913" | "0x5425890298aed601595a70AB815c96711a31Bc65" | "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63" | "0x07865c6e87b9f70255377e024ace6630c1eaa37f" | "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6" | "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU" | "0xf175520c52418dfe19c8098071a252da48cd1c19" | undefined;
    has: (args_0: string, args_1: string) => boolean;
};
export declare const isCircleChain: (chain: string) => chain is "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base";
export declare const isCircleChainId: (chainId: number) => chainId is 0 | 2 | 1 | 6 | 3 | 5;
export declare const isCircleSupported: (network: Network, chain: string) => network is "Mainnet" | "Testnet";
export declare function assertCircleChainId(chainId: number): asserts chainId is CircleChainId;
export declare function assertCircleChain(chain: string): asserts chain is CircleChain;
export declare const asCircleChainId: (chainId: number) => CircleChainId;
export declare const toCircleChainId: (chain: number | bigint | string) => CircleChainId;
export declare const toCircleChain: (chain: number | string | bigint) => CircleChain;
//# sourceMappingURL=circle.d.ts.map