export declare const chains: ["Solana", "Ethereum", "Terra", "Bsc", "Polygon", "Avalanche", "Oasis", "Algorand", "Aurora", "Fantom", "Karura", "Acala", "Klaytn", "Celo", "Near", "Moonbeam", "Neon", "Terra2", "Injective", "Osmosis", "Sui", "Aptos", "Arbitrum", "Optimism", "Gnosis", "Pythnet", "Xpla", "Btc", "Base", "Sei", "Rootstock", "Wormchain", "Cosmoshub", "Evmos", "Kujira", "Sepolia", "ArbitrumSepolia", "BaseSepolia", "OptimismSepolia", "Holesky"], chainIds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 3104, 4000, 4001, 4002, 10002, 10003, 10004, 10005, 10006];
export type Chain = (typeof chains)[number];
export type ChainId = (typeof chainIds)[number];
export declare const chainToChainId: (<K1 extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky">(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" ? {
    readonly Solana: 1;
    readonly Ethereum: 2;
    readonly Terra: 3;
    readonly Bsc: 4;
    readonly Polygon: 5;
    readonly Avalanche: 6;
    readonly Oasis: 7;
    readonly Algorand: 8;
    readonly Aurora: 9;
    readonly Fantom: 10;
    readonly Karura: 11;
    readonly Acala: 12;
    readonly Klaytn: 13;
    readonly Celo: 14;
    readonly Near: 15;
    readonly Moonbeam: 16;
    readonly Neon: 17;
    readonly Terra2: 18;
    readonly Injective: 19;
    readonly Osmosis: 20;
    readonly Sui: 21;
    readonly Aptos: 22;
    readonly Arbitrum: 23;
    readonly Optimism: 24;
    readonly Gnosis: 25;
    readonly Pythnet: 26;
    readonly Xpla: 28;
    readonly Btc: 29;
    readonly Base: 30;
    readonly Sei: 32;
    readonly Rootstock: 33;
    readonly Wormchain: 3104;
    readonly Cosmoshub: 4000;
    readonly Evmos: 4001;
    readonly Kujira: 4002;
    readonly Sepolia: 10002;
    readonly ArbitrumSepolia: 10003;
    readonly BaseSepolia: 10004;
    readonly OptimismSepolia: 10005;
    readonly Holesky: 10006;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    readonly Solana: 1;
    readonly Ethereum: 2;
    readonly Terra: 3;
    readonly Bsc: 4;
    readonly Polygon: 5;
    readonly Avalanche: 6;
    readonly Oasis: 7;
    readonly Algorand: 8;
    readonly Aurora: 9;
    readonly Fantom: 10;
    readonly Karura: 11;
    readonly Acala: 12;
    readonly Klaytn: 13;
    readonly Celo: 14;
    readonly Near: 15;
    readonly Moonbeam: 16;
    readonly Neon: 17;
    readonly Terra2: 18;
    readonly Injective: 19;
    readonly Osmosis: 20;
    readonly Sui: 21;
    readonly Aptos: 22;
    readonly Arbitrum: 23;
    readonly Optimism: 24;
    readonly Gnosis: 25;
    readonly Pythnet: 26;
    readonly Xpla: 28;
    readonly Btc: 29;
    readonly Base: 30;
    readonly Sei: 32;
    readonly Rootstock: 33;
    readonly Wormchain: 3104;
    readonly Cosmoshub: 4000;
    readonly Evmos: 4001;
    readonly Kujira: 4002;
    readonly Sepolia: 10002;
    readonly ArbitrumSepolia: 10003;
    readonly BaseSepolia: 10004;
    readonly OptimismSepolia: 10005;
    readonly Holesky: 10006;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    readonly Solana: 1;
    readonly Ethereum: 2;
    readonly Terra: 3;
    readonly Bsc: 4;
    readonly Polygon: 5;
    readonly Avalanche: 6;
    readonly Oasis: 7;
    readonly Algorand: 8;
    readonly Aurora: 9;
    readonly Fantom: 10;
    readonly Karura: 11;
    readonly Acala: 12;
    readonly Klaytn: 13;
    readonly Celo: 14;
    readonly Near: 15;
    readonly Moonbeam: 16;
    readonly Neon: 17;
    readonly Terra2: 18;
    readonly Injective: 19;
    readonly Osmosis: 20;
    readonly Sui: 21;
    readonly Aptos: 22;
    readonly Arbitrum: 23;
    readonly Optimism: 24;
    readonly Gnosis: 25;
    readonly Pythnet: 26;
    readonly Xpla: 28;
    readonly Btc: 29;
    readonly Base: 30;
    readonly Sei: 32;
    readonly Rootstock: 33;
    readonly Wormchain: 3104;
    readonly Cosmoshub: 4000;
    readonly Evmos: 4001;
    readonly Kujira: 4002;
    readonly Sepolia: 10002;
    readonly ArbitrumSepolia: 10003;
    readonly BaseSepolia: 10004;
    readonly OptimismSepolia: 10005;
    readonly Holesky: 10006;
}[("Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: string) => 8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006 | undefined;
    has: (args_0: string) => boolean;
};
export declare const chainIdToChain: (<K1 extends 8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006>(args_0: K1) => (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1) extends 8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006 ? {
    1: "Solana";
    2: "Ethereum";
    3: "Terra";
    4: "Bsc";
    5: "Polygon";
    6: "Avalanche";
    7: "Oasis";
    8: "Algorand";
    9: "Aurora";
    10: "Fantom";
    11: "Karura";
    12: "Acala";
    13: "Klaytn";
    14: "Celo";
    15: "Near";
    16: "Moonbeam";
    17: "Neon";
    18: "Terra2";
    19: "Injective";
    20: "Osmosis";
    21: "Sui";
    22: "Aptos";
    23: "Arbitrum";
    24: "Optimism";
    25: "Gnosis";
    26: "Pythnet";
    28: "Xpla";
    29: "Btc";
    30: "Base";
    32: "Sei";
    33: "Rootstock";
    3104: "Wormchain";
    4000: "Cosmoshub";
    4001: "Evmos";
    4002: "Kujira";
    10002: "Sepolia";
    10003: "ArbitrumSepolia";
    10004: "BaseSepolia";
    10005: "OptimismSepolia";
    10006: "Holesky";
}[(8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? {
    1: "Solana";
    2: "Ethereum";
    3: "Terra";
    4: "Bsc";
    5: "Polygon";
    6: "Avalanche";
    7: "Oasis";
    8: "Algorand";
    9: "Aurora";
    10: "Fantom";
    11: "Karura";
    12: "Acala";
    13: "Klaytn";
    14: "Celo";
    15: "Near";
    16: "Moonbeam";
    17: "Neon";
    18: "Terra2";
    19: "Injective";
    20: "Osmosis";
    21: "Sui";
    22: "Aptos";
    23: "Arbitrum";
    24: "Optimism";
    25: "Gnosis";
    26: "Pythnet";
    28: "Xpla";
    29: "Btc";
    30: "Base";
    32: "Sei";
    33: "Rootstock";
    3104: "Wormchain";
    4000: "Cosmoshub";
    4001: "Evmos";
    4002: "Kujira";
    10002: "Sepolia";
    10003: "ArbitrumSepolia";
    10004: "BaseSepolia";
    10005: "OptimismSepolia";
    10006: "Holesky";
}[(8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : {
    1: "Solana";
    2: "Ethereum";
    3: "Terra";
    4: "Bsc";
    5: "Polygon";
    6: "Avalanche";
    7: "Oasis";
    8: "Algorand";
    9: "Aurora";
    10: "Fantom";
    11: "Karura";
    12: "Acala";
    13: "Klaytn";
    14: "Celo";
    15: "Near";
    16: "Moonbeam";
    17: "Neon";
    18: "Terra2";
    19: "Injective";
    20: "Osmosis";
    21: "Sui";
    22: "Aptos";
    23: "Arbitrum";
    24: "Optimism";
    25: "Gnosis";
    26: "Pythnet";
    28: "Xpla";
    29: "Btc";
    30: "Base";
    32: "Sei";
    33: "Rootstock";
    3104: "Wormchain";
    4000: "Cosmoshub";
    4001: "Evmos";
    4002: "Kujira";
    10002: "Sepolia";
    10003: "ArbitrumSepolia";
    10004: "BaseSepolia";
    10005: "OptimismSepolia";
    10006: "Holesky";
}[(8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006) & (K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1)] : never) & {
    get: (args_0: number) => "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | undefined;
    has: (args_0: number) => boolean;
};
export declare const isChain: (chain: string) => chain is "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
export declare const isChainId: (chainId: number) => chainId is 8 | 2 | 1 | 6 | 3 | 4 | 22 | 5 | 7 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 32 | 33 | 3104 | 4000 | 4001 | 4002 | 10002 | 10003 | 10004 | 10005 | 10006;
export declare function assertChainId(chainId: number): asserts chainId is ChainId;
export declare function assertChain(chain: string): asserts chain is Chain;
export declare const asChainId: (chainId: number) => ChainId;
export declare const toChainId: (chain: number | string) => ChainId;
export declare const toChain: (chain: number | string | bigint) => Chain;
//# sourceMappingURL=chains.d.ts.map