"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCircleChain = exports.toCircleChainId = exports.asCircleChainId = exports.assertCircleChain = exports.assertCircleChainId = exports.isCircleSupported = exports.isCircleChainId = exports.isCircleChain = exports.usdcContract = exports.circleAPI = exports.circleChainIdToChain = exports.circleChainId = exports._ = exports.circleNetworks = exports.circleChainIds = exports.circleChains = void 0;
const utils_1 = require("../utils");
const circleAPIs = [
    ["Mainnet", "https://iris-api.circle.com/v1/attestations"],
    ["Testnet", "https://iris-api-sandbox.circle.com/v1/attestations"],
];
// https://developers.circle.com/stablecoin/docs/cctp-technical-reference#domain-list
const circleDomains = [
    ["Ethereum", 0],
    ["Avalanche", 1],
    ["Optimism", 2],
    ["Arbitrum", 3],
    ["Solana", 5],
    ["Base", 6],
];
const usdcContracts = [
    [
        "Mainnet",
        [
            ["Ethereum", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],
            ["Avalanche", "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e"],
            ["Arbitrum", "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"],
            ["Optimism", "0x179522635726710dd7d2035a81d856de4aa7836c"],
            ["Solana", "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"],
            ["Base", "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"],
        ],
    ],
    [
        "Testnet",
        [
            ["Avalanche", "0x5425890298aed601595a70AB815c96711a31Bc65"],
            ["Arbitrum", "0xfd064A18f3BF249cf1f87FC203E90D8f650f2d63"],
            ["Ethereum", "0x07865c6e87b9f70255377e024ace6630c1eaa37f"],
            ["Optimism", "0xe05606174bac4A6364B31bd0eCA4bf4dD368f8C6"],
            ["Solana", "4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU"],
            ["Base", "0xf175520c52418dfe19c8098071a252da48cd1c19"],
        ],
    ],
];
_a = (0, utils_1.zip)(circleDomains), exports.circleChains = _a[0], exports.circleChainIds = _a[1];
_b = (0, utils_1.zip)(usdcContracts), exports.circleNetworks = _b[0], exports._ = _b[1];
exports.circleChainId = (0, utils_1.constMap)(circleDomains);
exports.circleChainIdToChain = (0, utils_1.constMap)(circleDomains, [1, 0]);
exports.circleAPI = (0, utils_1.constMap)(circleAPIs);
exports.usdcContract = (0, utils_1.constMap)(usdcContracts);
const isCircleChain = (chain) => exports.circleChainId.has(chain);
exports.isCircleChain = isCircleChain;
const isCircleChainId = (chainId) => exports.circleChainIdToChain.has(chainId);
exports.isCircleChainId = isCircleChainId;
const isCircleSupported = (network, chain) => exports.usdcContract.has(network, chain);
exports.isCircleSupported = isCircleSupported;
function assertCircleChainId(chainId) {
    if (!(0, exports.isCircleChainId)(chainId))
        throw Error(`Unknown Circle chain id: ${chainId}`);
}
exports.assertCircleChainId = assertCircleChainId;
function assertCircleChain(chain) {
    if (!(0, exports.isCircleChain)(chain))
        throw Error(`Unknown Circle chain: ${chain}`);
}
exports.assertCircleChain = assertCircleChain;
//safe assertion that allows chaining
const asCircleChainId = (chainId) => {
    assertCircleChainId(chainId);
    return chainId;
};
exports.asCircleChainId = asCircleChainId;
const toCircleChainId = (chain) => {
    switch (typeof chain) {
        case "string":
            if ((0, exports.isCircleChain)(chain))
                return (0, exports.circleChainId)(chain);
            break;
        case "number":
            if ((0, exports.isCircleChainId)(chain))
                return chain;
            break;
        case "bigint":
            const ci = Number(chain);
            if ((0, exports.isCircleChainId)(ci))
                return ci;
            break;
    }
    throw Error(`Cannot convert to ChainId: ${chain}`);
};
exports.toCircleChainId = toCircleChainId;
const toCircleChain = (chain) => {
    switch (typeof chain) {
        case "string":
            if ((0, exports.isCircleChain)(chain))
                return chain;
            break;
        case "number":
            if ((0, exports.isCircleChainId)(chain))
                return (0, exports.circleChainIdToChain)(chain);
            break;
        case "bigint":
            const cid = Number(chain);
            if ((0, exports.isCircleChainId)(cid))
                return (0, exports.circleChainIdToChain)(cid);
            break;
    }
    throw Error(`Cannot convert to Chain: ${chain}`);
};
exports.toCircleChain = toCircleChain;
//# sourceMappingURL=circle.js.map