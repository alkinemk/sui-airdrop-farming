"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findIdLayoutPair = exports.getBytesItemSize = exports.checkUint8ArrayDeeplyEqual = exports.checkNumEquals = exports.checkUint8ArraySize = void 0;
const layout_1 = require("./layout");
const checkUint8ArraySize = (custom, size) => {
    if (custom.length !== size)
        throw new Error(`binary size mismatch: layout size: ${custom.length}, data size: ${size}`);
};
exports.checkUint8ArraySize = checkUint8ArraySize;
const checkNumEquals = (custom, data) => {
    if (custom != data)
        throw new Error(`value mismatch: (constant) layout value: ${custom}, data value: ${data}`);
};
exports.checkNumEquals = checkNumEquals;
const checkUint8ArrayDeeplyEqual = (custom, data) => {
    (0, exports.checkUint8ArraySize)(custom, data.length);
    for (let i = 0; i < custom.length; ++i)
        if (custom[i] !== data[i])
            throw new Error(`binary data mismatch: layout value: ${custom}, data value: ${data}`);
};
exports.checkUint8ArrayDeeplyEqual = checkUint8ArrayDeeplyEqual;
function getBytesItemSize(bytesItem) {
    if ("size" in bytesItem && bytesItem.size !== undefined)
        return bytesItem.size;
    if ((0, layout_1.isBytesType)(bytesItem.custom))
        return bytesItem.custom.length;
    if ((0, layout_1.isBytesType)(bytesItem?.custom?.from))
        return bytesItem.custom.from.length;
    return null;
}
exports.getBytesItemSize = getBytesItemSize;
function findIdLayoutPair(item, data) {
    const id = data[item.idTag ?? "id"];
    return item.layouts.find(([idOrConversionId]) => (Array.isArray(idOrConversionId) ? idOrConversionId[1] : idOrConversionId) == id);
}
exports.findIdLayoutPair = findIdLayoutPair;
//# sourceMappingURL=utils.js.map