"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFixedValues = exports.dynamicItemsOfLayout = exports.fixedItemsOfLayout = void 0;
const layout_1 = require("./layout");
function filterItem(item, fixed) {
    switch (item.binary) {
        case "int":
        case "uint":
        case "bytes": {
            const isFixedItem = item["custom"] !== undefined && ((0, layout_1.isPrimitiveType)(item["custom"]) || (0, layout_1.isPrimitiveType)(item["custom"].from));
            return (fixed && isFixedItem || !fixed && !isFixedItem) ? item : null;
        }
        case "array": {
            const filtered = internalFilterItemsOfLayout(item.layout, fixed);
            return (filtered !== null) ? { ...item, layout: filtered } : null;
        }
        case "object": {
            const filteredItems = internalFilterItemsOfProperLayout(item.layout, fixed);
            return (filteredItems.length > 0) ? { ...item, layout: filteredItems } : null;
        }
        case "switch": {
            const filteredIdLayoutPairs = item.layouts.reduce((acc, [idOrConversionId, idLayout]) => {
                const filteredItems = internalFilterItemsOfProperLayout(idLayout, fixed);
                return filteredItems.length > 0
                    ? [...acc, [idOrConversionId, filteredItems]]
                    : acc;
            }, []);
            return { ...item, layouts: filteredIdLayoutPairs };
        }
    }
}
function internalFilterItemsOfProperLayout(proper, fixed) {
    return proper.reduce((acc, item) => {
        const filtered = filterItem(item, fixed);
        return filtered !== null ? [...acc, filtered] : acc;
    }, []);
}
function internalFilterItemsOfLayout(layout, fixed) {
    return (Array.isArray(layout)
        ? internalFilterItemsOfProperLayout(layout, fixed)
        : filterItem(layout, fixed));
}
function filterItemsOfLayout(layout, fixed) {
    return internalFilterItemsOfLayout(layout, fixed);
}
const fixedItemsOfLayout = (layout) => filterItemsOfLayout(layout, true);
exports.fixedItemsOfLayout = fixedItemsOfLayout;
const dynamicItemsOfLayout = (layout) => filterItemsOfLayout(layout, false);
exports.dynamicItemsOfLayout = dynamicItemsOfLayout;
function internalAddFixedValuesItem(item, dynamicValue) {
    switch (item.binary) {
        case "int":
        case "uint":
        case "bytes": {
            //look ma, ternary ternary operator!
            return !item?.omit
                ? (item.custom !== undefined &&
                    ((0, layout_1.isPrimitiveType)(item.custom) || (0, layout_1.isPrimitiveType)(item.custom.from)))
                    ? (0, layout_1.isPrimitiveType)(item.custom)
                        ? item.custom
                        : item.custom.to
                    : dynamicValue
                : undefined;
        }
        case "array": {
            return Array.isArray(dynamicValue)
                ? dynamicValue.map(element => internalAddFixedValues(item.layout, element))
                : undefined;
        }
        case "object": {
            return internalAddFixedValuesLayout(item.layout, dynamicValue ?? {});
        }
        case "switch": {
            const id = dynamicValue[item.idTag ?? "id"];
            const [_, idLayout] = item.layouts.find(([idOrConversionId]) => (Array.isArray(idOrConversionId) ? idOrConversionId[1] : idOrConversionId) == id);
            return {
                [item.idTag ?? "id"]: id,
                ...internalAddFixedValues(idLayout, dynamicValue)
            };
        }
    }
}
function internalAddFixedValuesLayout(proper, dynamicValues) {
    const ret = {};
    for (const item of proper) {
        const r = internalAddFixedValuesItem(item, dynamicValues[item.name]);
        if (r !== undefined)
            ret[item.name] = r;
    }
    return ret;
}
function internalAddFixedValues(layout, dynamicValues) {
    return Array.isArray(layout)
        ? internalAddFixedValuesLayout(layout, dynamicValues)
        : internalAddFixedValuesItem(layout, dynamicValues);
}
function addFixedValues(layout, dynamicValues) {
    return internalAddFixedValues(layout, dynamicValues);
}
exports.addFixedValues = addFixedValues;
//# sourceMappingURL=fixedDynamic.js.map