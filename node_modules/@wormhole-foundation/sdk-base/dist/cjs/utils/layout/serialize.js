"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeNum = exports.serializeLayout = void 0;
const layout_1 = require("./layout");
const size_1 = require("./size");
const utils_1 = require("./utils");
function serializeLayout(layout, data, encoded, offset = 0) {
    return (internalSerializeLayout(layout, data, encoded, offset));
}
exports.serializeLayout = serializeLayout;
//see numberMaxSize comment in layout.ts
const maxAllowedNumberVal = 2 ** (layout_1.numberMaxSize * 8);
function serializeNum(encoded, offset, val, bytes, endianness = "big", signed = false) {
    if (!signed && val < 0)
        throw new Error(`Value ${val} is negative but unsigned`);
    if (typeof val === "number") {
        if (!Number.isInteger(val))
            throw new Error(`Value ${val} is not an integer`);
        if (bytes > layout_1.numberMaxSize) {
            if (val >= maxAllowedNumberVal)
                throw new Error(`Value ${val} is too large to be safely converted into an integer`);
            if (signed && val <= -maxAllowedNumberVal)
                throw new Error(`Value ${val} is too small to be safely converted into an integer`);
        }
    }
    const bound = 2n ** BigInt(bytes * 8);
    if (val >= bound)
        throw new Error(`Value ${val} is too large for ${bytes} bytes`);
    if (signed && val < -bound)
        throw new Error(`Value ${val} is too small for ${bytes} bytes`);
    //correctly handles both signed and unsigned values
    for (let i = 0; i < bytes; ++i)
        encoded[offset + i] =
            Number((BigInt(val) >> BigInt(8 * (endianness === "big" ? bytes - i - 1 : i)) & 0xffn));
    return offset + bytes;
}
exports.serializeNum = serializeNum;
function internalSerializeLayout(layout, data, encoded, offset = 0) {
    let ret = encoded ?? new Uint8Array((0, size_1.calcLayoutSize)(layout, data));
    if (Array.isArray(layout))
        for (let i = 0; i < layout.length; ++i)
            try {
                offset =
                    serializeLayoutItem(layout[i], data[layout[i].name], ret, offset);
            }
            catch (e) {
                e.message = `when serializing item '${layout[i].name}': ${e.message}`;
                throw e;
            }
    else
        offset = serializeLayoutItem(layout, data, ret, offset);
    return encoded === undefined ? ret : offset;
}
function serializeLayoutItem(item, data, encoded, offset) {
    switch (item.binary) {
        case "int":
        case "uint": {
            const value = (() => {
                if ((0, layout_1.isNumType)(item.custom)) {
                    if (!("omit" in item && item.omit))
                        (0, utils_1.checkNumEquals)(item.custom, data);
                    return item.custom;
                }
                if ((0, layout_1.isNumType)(item?.custom?.from))
                    //no proper way to deeply check equality of item.custom.to and data in JS
                    return item.custom.from;
                return item.custom !== undefined ? item.custom.from(data) : data;
            })();
            offset =
                serializeNum(encoded, offset, value, item.size, item.endianness, item.binary === "int");
            break;
        }
        case "bytes": {
            const value = (() => {
                if ((0, layout_1.isBytesType)(item.custom)) {
                    if (!("omit" in item && item.omit))
                        (0, utils_1.checkUint8ArrayDeeplyEqual)(item.custom, data);
                    return item.custom;
                }
                if ((0, layout_1.isBytesType)(item?.custom?.from))
                    //no proper way to deeply check equality of item.custom.to and data in JS
                    return item.custom.from;
                item = item;
                const ret = item.custom !== undefined ? item.custom.from(data) : data;
                if ("size" in item && item.size !== undefined)
                    (0, utils_1.checkUint8ArraySize)(ret, item.size);
                else if ("lengthSize" in item && item.lengthSize !== undefined)
                    offset =
                        serializeNum(encoded, offset, ret.length, item.lengthSize, item.lengthEndianness);
                return ret;
            })();
            encoded.set(value, offset);
            offset += value.length;
            break;
        }
        case "array": {
            if ("length" in item && item.length !== data.length)
                throw new Error(`array length mismatch: layout length: ${item.length}, data length: ${data.length}`);
            if ("lengthSize" in item && item.lengthSize !== undefined)
                offset =
                    serializeNum(encoded, offset, data.length, item.lengthSize, item.lengthEndianness);
            for (let i = 0; i < data.length; ++i)
                offset = internalSerializeLayout(item.layout, data[i], encoded, offset);
            break;
        }
        case "object": {
            offset = internalSerializeLayout(item.layout, data, encoded, offset);
            break;
        }
        case "switch": {
            const [idOrConversionId, layout] = (0, utils_1.findIdLayoutPair)(item, data);
            const idNum = (Array.isArray(idOrConversionId) ? idOrConversionId[0] : idOrConversionId);
            offset = serializeNum(encoded, offset, idNum, item.idSize, item.idEndianness);
            offset = internalSerializeLayout(layout, data, encoded, offset);
            break;
        }
    }
    return offset;
}
;
//# sourceMappingURL=serialize.js.map