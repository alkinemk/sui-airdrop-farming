"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaAddress = exports.SolanaZeroAddress = void 0;
const connect_sdk_1 = require("@wormhole-foundation/connect-sdk");
const web3_js_1 = require("@solana/web3.js");
const types_1 = require("./types");
exports.SolanaZeroAddress = '11111111111111111111111111111111';
class SolanaAddress {
    static byteSize = 32;
    static platform = types_1._platform;
    type = 'Native';
    address;
    constructor(address) {
        if (SolanaAddress.instanceof(address)) {
            this.address = address.address;
        }
        else if (connect_sdk_1.UniversalAddress.instanceof(address)) {
            this.address = new web3_js_1.PublicKey(address.toUint8Array());
        }
        else if (typeof address === 'string' && connect_sdk_1.encoding.hex.valid(address)) {
            this.address = new web3_js_1.PublicKey(connect_sdk_1.encoding.hex.decode(address));
        }
        else {
            this.address = new web3_js_1.PublicKey(address);
        }
    }
    unwrap() {
        return this.address;
    }
    toString() {
        return this.address.toBase58();
    }
    toUint8Array() {
        return new Uint8Array(this.address.toBytes());
    }
    toNative() {
        return this;
    }
    toUniversalAddress() {
        return new connect_sdk_1.UniversalAddress(this.toUint8Array());
    }
    static instanceof(address) {
        return address.constructor.platform === SolanaAddress.platform;
    }
    equals(other) {
        if (SolanaAddress.instanceof(other)) {
            return other.unwrap().equals(this.unwrap());
        }
        else {
            return this.toUniversalAddress().equals(other);
        }
    }
}
exports.SolanaAddress = SolanaAddress;
(0, connect_sdk_1.registerNative)(types_1._platform, SolanaAddress);
//# sourceMappingURL=address.js.map