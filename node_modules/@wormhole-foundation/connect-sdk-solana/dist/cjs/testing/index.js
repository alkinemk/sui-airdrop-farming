"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolanaSignAndSendSigner = exports.getSolanaSigner = void 0;
const web3_js_1 = require("@solana/web3.js");
const platform_1 = require("../platform");
const signer_1 = require("./signer");
const connect_sdk_1 = require("@wormhole-foundation/connect-sdk");
const sendSigner_1 = require("./sendSigner");
// returns a SignOnlySigner for the Solana platform
async function getSolanaSigner(rpc, privateKey) {
    const [_, chain] = await platform_1.SolanaPlatform.chainFromRpc(rpc);
    return new signer_1.SolanaSigner(chain, web3_js_1.Keypair.fromSecretKey(connect_sdk_1.encoding.b58.decode(privateKey)), rpc);
}
exports.getSolanaSigner = getSolanaSigner;
// returns a SignAndSendSigner for the Solana platform
async function getSolanaSignAndSendSigner(rpc, privateKey) {
    const [_, chain] = await platform_1.SolanaPlatform.chainFromRpc(rpc);
    return new sendSigner_1.SolanaSendSigner(rpc, chain, web3_js_1.Keypair.fromSecretKey(connect_sdk_1.encoding.b58.decode(privateKey)));
}
exports.getSolanaSignAndSendSigner = getSolanaSignAndSendSigner;
__exportStar(require("./signer"), exports);
__exportStar(require("./sendSigner"), exports);
//# sourceMappingURL=index.js.map