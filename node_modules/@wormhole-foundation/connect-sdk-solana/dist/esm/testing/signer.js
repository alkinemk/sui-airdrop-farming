import { SolanaPlatform } from '../platform';
import { logTxDetails } from './debug';
export class SolanaSigner {
    _chain;
    _keypair;
    _rpc;
    _debug;
    constructor(_chain, _keypair, _rpc, _debug = false) {
        this._chain = _chain;
        this._keypair = _keypair;
        this._rpc = _rpc;
        this._debug = _debug;
    }
    chain() {
        return this._chain;
    }
    address() {
        return this._keypair.publicKey.toBase58();
    }
    async sign(tx) {
        const { blockhash } = await SolanaPlatform.latestBlock(this._rpc);
        const signed = [];
        for (const txn of tx) {
            const { description, transaction: { transaction, signers: extraSigners }, } = txn;
            console.log(`Signing: ${description} for ${this.address()}`);
            if (this._debug)
                logTxDetails(transaction);
            transaction.recentBlockhash = blockhash;
            transaction.partialSign(this._keypair, ...(extraSigners ?? []));
            signed.push(transaction.serialize());
        }
        return signed;
    }
}
//# sourceMappingURL=signer.js.map