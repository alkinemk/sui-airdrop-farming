import { Chain, Network } from "@wormhole-foundation/sdk-base";
import { ChainContext, Signer, TokenId } from "@wormhole-foundation/sdk-definitions";
import { AttestationReceipt, TransferQuote } from "../../types";
import { AutomaticRoute } from "../route";
import { Receipt, TransferParams, ValidatedTransferParams, ValidationResult } from "../types";
export declare namespace AutomaticTokenBridgeRoute {
    type Options = {
        nativeGas: number;
    };
    type NormalizedParams = {
        fee: bigint;
        amount: bigint;
        nativeGasAmount: bigint;
    };
    interface ValidatedParams extends ValidatedTransferParams<Options> {
        normalizedParams: NormalizedParams;
    }
}
type Op = AutomaticTokenBridgeRoute.Options;
type Vp = AutomaticTokenBridgeRoute.ValidatedParams;
type Tp = TransferParams<Op>;
type Vr = ValidationResult<Op>;
type Q = TransferQuote;
type R = Receipt<AttestationReceipt<"AutomaticTokenBridge">>;
export declare class AutomaticTokenBridgeRoute<N extends Network> extends AutomaticRoute<N, Op, R, Q> {
    NATIVE_GAS_DROPOFF_SUPPORTED: boolean;
    static supportedNetworks(): Network[];
    static supportedChains(network: Network): Chain[];
    static supportedSourceTokens(fromChain: ChainContext<Network>): Promise<(TokenId | "native")[]>;
    static supportedDestinationTokens<N extends Network>(sourceToken: TokenId, fromChain: ChainContext<N>, toChain: ChainContext<N>): Promise<(TokenId | "native")[]>;
    static isProtocolSupported<N extends Network>(fromChain: ChainContext<N>, toChain: ChainContext<N>): boolean;
    getDefaultOptions(): Op;
    isSupported(): Promise<boolean>;
    isAvailable(): Promise<boolean>;
    validate(params: Tp): Promise<Vr>;
    normalizeTransferParams(params: Tp): Promise<{
        fee: bigint;
        amount: bigint;
        nativeGasAmount: bigint;
    }>;
    quote(params: Vp): Promise<TransferQuote>;
    initiate(signer: Signer, params: Vp): Promise<R>;
    track(receipt: R, timeout?: number): AsyncGenerator<import("../../protocols/tokenTransfer").TokenTransferReceipt<"Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla", "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Acala" | "Arbitrum" | "Aurora" | "Avalanche" | "Base" | "Bsc" | "Celo" | "Ethereum" | "Fantom" | "Gnosis" | "Karura" | "Klaytn" | "Moonbeam" | "Neon" | "Oasis" | "Optimism" | "Polygon" | "Rootstock" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "Pythnet" | "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla">, void, unknown>;
    private toTransferDetails;
}
export {};
//# sourceMappingURL=automatic.d.ts.map