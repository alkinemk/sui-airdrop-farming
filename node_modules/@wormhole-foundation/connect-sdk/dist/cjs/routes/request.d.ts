import { Network, tokens } from "@wormhole-foundation/sdk-base";
import { ChainAddress, ChainContext, TokenId } from "@wormhole-foundation/sdk-definitions";
import { Wormhole } from "../wormhole";
export declare class RouteTransferRequest<N extends Network> {
    from: ChainAddress;
    to: ChainAddress;
    source: TokenDetails;
    destination?: TokenDetails;
    fromChain: ChainContext<N>;
    toChain: ChainContext<N>;
    private constructor();
    normalizeAmount(amount: string): bigint;
    displayAmount(amount: bigint): string;
    static create<N extends Network>(wh: Wormhole<N>, params: {
        from: ChainAddress;
        to: ChainAddress;
        source: TokenId | "native";
        destination?: TokenId | "native";
    }, fromChain?: ChainContext<N>, toChain?: ChainContext<N>): Promise<RouteTransferRequest<N>>;
}
export interface TokenDetails {
    id: TokenId | "native";
    decimals: number;
    symbol?: tokens.TokenSymbol;
    wrapped?: TokenId;
}
//# sourceMappingURL=request.d.ts.map