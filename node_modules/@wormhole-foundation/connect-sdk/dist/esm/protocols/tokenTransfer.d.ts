import { Chain, ChainToPlatform, Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import { AttestationId, AttestationReceipt, AutomaticTokenBridge, ChainContext, Signer, TokenBridge, TokenId, TokenTransferDetails, TransactionId, TxHash, WormholeMessageId } from "@wormhole-foundation/sdk-definitions";
import { Wormhole } from "../wormhole";
import { AttestedTransferReceipt, CompletedTransferReceipt, SourceFinalizedTransferReceipt, TransferQuote, TransferReceipt, TransferState, WormholeTransfer } from "../wormholeTransfer";
export type TokenTransferProtocol = "TokenBridge" | "AutomaticTokenBridge";
export type TokenTransferVAA = TokenBridge.TransferVAA | AutomaticTokenBridge.VAA;
export declare class TokenTransfer<N extends Network = Network> implements WormholeTransfer<TokenTransferProtocol> {
    private readonly wh;
    fromChain: ChainContext<N, Platform, Chain>;
    toChain: ChainContext<N, Platform, Chain>;
    private _state;
    transfer: TokenTransferDetails;
    txids: TransactionId[];
    attestations?: AttestationReceipt<TokenTransferProtocol>[];
    private constructor();
    getTransferState(): TransferState;
    static from<N extends Network>(wh: Wormhole<N>, from: TokenTransferDetails, timeout?: number, fromChain?: ChainContext<N, Platform, Chain>, toChain?: ChainContext<N, Platform, Chain>): Promise<TokenTransfer<N>>;
    static from<N extends Network>(wh: Wormhole<N>, from: WormholeMessageId, timeout?: number, fromChain?: ChainContext<N, Platform, Chain>, toChain?: ChainContext<N, Platform, Chain>): Promise<TokenTransfer<N>>;
    static from<N extends Network>(wh: Wormhole<N>, from: TransactionId, timeout?: number, fromChain?: ChainContext<N, Platform, Chain>, toChain?: ChainContext<N, Platform, Chain>): Promise<TokenTransfer<N>>;
    private static fromIdentifier;
    private static fromTransaction;
    initiateTransfer(signer: Signer): Promise<TxHash[]>;
    fetchAttestation(timeout?: number): Promise<AttestationId[]>;
    completeTransfer(signer: Signer): Promise<TxHash[]>;
    static transfer<N extends Network>(fromChain: ChainContext<N, Platform, Chain>, transfer: TokenTransferDetails, signer: Signer<N, Chain>): Promise<TransactionId[]>;
    static redeem<N extends Network>(toChain: ChainContext<N, Platform, Chain>, vaa: TokenTransferVAA, signer: Signer<N, Chain>): Promise<TransactionId[]>;
    static isTransferComplete<N extends Network, P extends Platform, C extends PlatformToChains<P>>(toChain: ChainContext<N, P, C>, vaa: TokenTransferVAA): Promise<boolean>;
    static getTransferMessage<N extends Network, P extends Platform, C extends PlatformToChains<P>>(chain: ChainContext<N, P, C>, txid: TxHash, timeout?: number): Promise<WormholeMessageId>;
    static getTransferVaa<N extends Network>(wh: Wormhole<N>, key: WormholeMessageId | TxHash, timeout?: number): Promise<TokenTransferVAA>;
    static lookupDestinationToken<N extends Network, SC extends Chain, DC extends Chain>(srcChain: ChainContext<N, ChainToPlatform<SC>, SC>, dstChain: ChainContext<N, ChainToPlatform<DC>, DC>, token: TokenId<SC> | "native"): Promise<TokenId<DC>>;
    static validateTransferDetails<N extends Network>(wh: Wormhole<N>, transfer: TokenTransferDetails, fromChain?: ChainContext<N, Platform, Chain>, toChain?: ChainContext<N, Platform, Chain>): Promise<void>;
    static quoteTransfer<N extends Network>(srcChain: ChainContext<N, Platform, Chain>, dstChain: ChainContext<N, Platform, Chain>, transfer: TokenTransferDetails): Promise<TransferQuote>;
    static destinationOverrides<N extends Network>(srcChain: ChainContext<N, Platform, Chain>, dstChain: ChainContext<N, Platform, Chain>, transfer: TokenTransferDetails): Promise<TokenTransferDetails>;
    static getReceipt<N extends Network>(xfer: TokenTransfer<N>): TransferReceipt<TokenTransferProtocol>;
    static track<N extends Network, SC extends Chain, DC extends Chain>(wh: Wormhole<N>, receipt: TransferReceipt<TokenTransferProtocol, SC, DC>, timeout?: number, fromChain?: ChainContext<N, ChainToPlatform<SC>, SC>, toChain?: ChainContext<N, ChainToPlatform<DC>, DC>): AsyncGenerator<import("../wormholeTransfer").CreatedTransferReceipt<TokenTransferProtocol, SC, DC> | SourceFinalizedTransferReceipt<TokenTransferProtocol, SC, DC> | AttestedTransferReceipt<TokenTransferProtocol, SC, DC> | CompletedTransferReceipt<TokenTransferProtocol, SC, DC>, void, unknown>;
}
//# sourceMappingURL=tokenTransfer.d.ts.map