import { displayAmount, normalizeAmount, tokens } from "@wormhole-foundation/sdk-base";
import { canonicalAddress, isTokenId, } from "@wormhole-foundation/sdk-definitions";
export class RouteTransferRequest {
    from;
    to;
    source;
    destination;
    fromChain;
    toChain;
    constructor(from, to, fromChain, toChain, source, destination) {
        this.from = from;
        this.fromChain = fromChain;
        this.to = to;
        this.toChain = toChain;
        this.source = source;
        this.destination = destination;
    }
    normalizeAmount(amount) {
        return normalizeAmount(amount, BigInt(this.source.decimals));
    }
    displayAmount(amount) {
        return displayAmount(amount, BigInt(this.source.decimals), BigInt(this.source.decimals));
    }
    static async create(wh, params, fromChain, toChain) {
        fromChain = fromChain ?? wh.getChain(params.from.chain);
        toChain = toChain ?? wh.getChain(params.to.chain);
        const sourceDetails = await getTokenDetails(fromChain, params.source);
        const destDetails = params.destination
            ? await getTokenDetails(toChain, params.destination)
            : undefined;
        const rtr = new RouteTransferRequest(params.from, params.to, fromChain, toChain, sourceDetails, destDetails);
        return rtr;
    }
}
async function getTokenDetails(chain, token) {
    const address = isTokenId(token) ? canonicalAddress(token) : token;
    const details = chain.config.tokenMap
        ? tokens.filters.byAddress(chain.config.tokenMap, address)
        : undefined;
    const symbol = details ? details.symbol : undefined;
    const wrapped = token === "native" ? await chain.getNativeWrappedTokenId() : undefined;
    const decimals = Number(await chain.getDecimals(isTokenId(token) ? token.address : token));
    return {
        id: token,
        decimals,
        wrapped,
        symbol,
    };
}
//# sourceMappingURL=request.js.map