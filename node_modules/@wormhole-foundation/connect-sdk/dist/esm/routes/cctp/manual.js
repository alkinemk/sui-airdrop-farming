import { circle, contracts } from "@wormhole-foundation/sdk-base";
import { CircleBridge, } from "@wormhole-foundation/sdk-definitions";
import { signSendWait } from "../../common";
import { CircleTransfer } from "../../protocols/cctpTransfer";
import { TransferState, isAttested } from "../../types";
import { ManualRoute } from "../route";
import { Wormhole } from "../../wormhole";
export class CCTPRoute extends ManualRoute {
    static supportedNetworks() {
        return ["Mainnet", "Testnet"];
    }
    // get the list of chains this route supports
    static supportedChains(network) {
        if (contracts.circleContractChains.has(network)) {
            return contracts.circleContractChains.get(network);
        }
        return [];
    }
    // get the list of source tokens that are possible to send
    static async supportedSourceTokens(fromChain) {
        const { network, chain } = fromChain;
        if (!circle.usdcContract.has(network, chain))
            return [];
        return [Wormhole.chainAddress(chain, circle.usdcContract.get(network, chain))];
    }
    // get the liist of destination tokens that may be recieved on the destination chain
    static async supportedDestinationTokens(sourceToken, fromChain, toChain) {
        const { network, chain } = toChain;
        if (!circle.usdcContract.has(network, chain))
            return [];
        return [Wormhole.chainAddress(chain, circle.usdcContract.get(network, chain))];
    }
    static isProtocolSupported(fromChain, toChain) {
        return fromChain.supportsCircleBridge() && toChain.supportsCircleBridge();
    }
    getDefaultOptions() {
        return {
            payload: undefined,
        };
    }
    async validate(params) {
        const amount = this.request.normalizeAmount(params.amount);
        if (amount < 0n) {
            return {
                valid: false,
                params,
                error: new Error("Amount must be positive"),
            };
        }
        const validatedParams = {
            normalizedParams: {
                amount,
            },
            options: params.options ?? this.getDefaultOptions(),
            ...params,
        };
        return { valid: true, params: validatedParams };
    }
    async quote(params) {
        return await CircleTransfer.quoteTransfer(this.request.fromChain, this.request.toChain, this.toTransferDetails(params));
    }
    async initiate(signer, params) {
        let transfer = this.toTransferDetails(params);
        let txids = await CircleTransfer.transfer(this.request.fromChain, transfer, signer);
        const msg = await CircleTransfer.getTransferMessage(this.request.fromChain, txids[txids.length - 1].txid);
        return {
            from: transfer.from.chain,
            to: transfer.to.chain,
            state: TransferState.SourceFinalized,
            originTxs: txids,
            attestation: { id: msg.id, attestation: { message: msg.message } },
        };
    }
    async complete(signer, receipt) {
        if (!isAttested(receipt))
            throw new Error("The source must be finalized in order to complete the transfer");
        const { id, attestation: att } = receipt.attestation;
        if (CircleBridge.isCircleAttestation(att)) {
            const { message, attestation } = att;
            if (!attestation)
                throw new Error(`No Circle attestation for ${id}`);
            let cb = await this.request.toChain.getCircleBridge();
            let xfer = cb.redeem(this.request.to.address, message, attestation);
            return await signSendWait(this.request.toChain, xfer, signer);
        }
        else {
            //
            return [];
        }
    }
    async *track(receipt, timeout) {
        yield* CircleTransfer.track(this.wh, receipt, timeout, this.request.fromChain, this.request.toChain);
    }
    toTransferDetails(params) {
        return {
            from: this.request.from,
            to: this.request.to,
            amount: params.normalizedParams.amount,
            automatic: false,
            ...params.options,
        };
    }
}
//# sourceMappingURL=manual.js.map