import { Network } from "@wormhole-foundation/sdk-base";
import { ChainContext, TokenId } from "@wormhole-foundation/sdk-definitions";
import { Wormhole } from "../wormhole";
import { RouteTransferRequest } from "./request";
import { UnknownRoute, UnknownRouteConstructor } from "./route";
export type RouteSortOptions = "cost" | "speed";
export declare class RouteResolver<N extends Network> {
    wh: Wormhole<N>;
    routeConstructors: UnknownRouteConstructor<N>[];
    inputTokenList?: (TokenId | "native")[];
    constructor(wh: Wormhole<N>, routeConstructors: UnknownRouteConstructor<N>[]);
    supportedSourceTokens(chain: ChainContext<Network>): Promise<(TokenId | "native")[]>;
    supportedDestinationTokens(inputToken: TokenId | "native", fromChain: ChainContext<Network>, toChain: ChainContext<Network>): Promise<(TokenId | "native")[]>;
    findRoutes(request: RouteTransferRequest<N>): Promise<UnknownRoute<N>[]>;
    sortRoutes(routes: UnknownRoute<N>[], sortBy: RouteSortOptions): Promise<UnknownRoute<N>[]>;
}
//# sourceMappingURL=resolver.d.ts.map