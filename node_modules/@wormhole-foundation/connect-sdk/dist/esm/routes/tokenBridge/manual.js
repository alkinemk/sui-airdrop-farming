import { contracts } from "@wormhole-foundation/sdk-base";
import { TokenTransfer } from "../../protocols/tokenTransfer";
import { TransferState, isAttested, } from "../../types";
import { Wormhole } from "../../wormhole";
import { ManualRoute } from "../route";
export class TokenBridgeRoute extends ManualRoute {
    static supportedNetworks() {
        return ["Mainnet", "Testnet"];
    }
    // get the list of chains this route supports
    static supportedChains(network) {
        return contracts.tokenBridgeChains(network);
    }
    // get the list of source tokens that are possible to send
    static async supportedSourceTokens(fromChain) {
        // Default list for the chain
        return Object.values(fromChain.config.tokenMap).map((td) => {
            if (td.address === "native")
                return "native";
            return Wormhole.chainAddress(td.chain, td.address);
        });
    }
    // get the liist of destination tokens that may be recieved on the destination chain
    static async supportedDestinationTokens(sourceToken, fromChain, toChain) {
        return [await TokenTransfer.lookupDestinationToken(fromChain, toChain, sourceToken)];
    }
    static isProtocolSupported(fromChain, toChain) {
        return fromChain.supportsTokenBridge() && toChain.supportsTokenBridge();
    }
    getDefaultOptions() {
        return { payload: undefined };
    }
    async validate(params) {
        const amt = this.request.normalizeAmount(params.amount);
        if (amt <= 0n) {
            return { valid: false, params, error: new Error("Amount has to be positive") };
        }
        const validatedParams = {
            amount: params.amount,
            normalizedParams: { amount: amt },
            options: {},
        };
        return { valid: true, params: validatedParams };
    }
    async quote(params) {
        return await TokenTransfer.quoteTransfer(this.request.fromChain, this.request.toChain, this.toTransferDetails(params));
    }
    async initiate(signer, params) {
        const transfer = this.toTransferDetails(params);
        const txids = await TokenTransfer.transfer(this.request.fromChain, transfer, signer);
        const msg = await TokenTransfer.getTransferMessage(this.request.fromChain, txids[txids.length - 1].txid);
        return {
            from: transfer.from.chain,
            to: transfer.to.chain,
            state: TransferState.SourceFinalized,
            originTxs: txids,
            attestation: { id: msg },
        };
    }
    async complete(signer, receipt) {
        if (!isAttested(receipt))
            throw new Error("The source must be finalized in order to complete the transfer");
        return await TokenTransfer.redeem(this.request.toChain, 
        // todo: ew?
        receipt.attestation.attestation, signer);
    }
    async *track(receipt, timeout) {
        yield* TokenTransfer.track(this.wh, receipt, timeout, this.request.fromChain, this.request.toChain);
    }
    toTransferDetails(params) {
        return {
            token: this.request.source.id,
            from: this.request.from,
            to: this.request.to,
            amount: params.normalizedParams.amount,
            ...params.options,
        };
    }
}
//# sourceMappingURL=manual.js.map