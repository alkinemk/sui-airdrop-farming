import { chainToPlatform, chains, decimals, explorer, finality, isChain, nativeChainIds, rpc, toChainId, tokens, } from "@wormhole-foundation/sdk-base";
import { getContracts } from "./contracts";
export function isTokenId(thing) {
    return (typeof thing === "object" &&
        typeof thing.address !== undefined &&
        isChain(thing.chain));
}
export function isTransactionIdentifier(thing) {
    return thing.chain !== undefined && thing.txid !== undefined;
}
export function buildConfig(n) {
    const cc = chains
        .map((c) => {
        const platform = chainToPlatform(c);
        let nativeChainId = "";
        try {
            nativeChainId = nativeChainIds.networkChainToNativeChainId.get(n, c);
        }
        catch { }
        const tokenMap = tokens.getTokenMap(n, c);
        const nativeToken = tokenMap
            ? Object.values(tokenMap).find((token) => token.address === "native" && token.wrapped)
            : undefined;
        const wrappedNative = nativeToken ? tokenMap[nativeToken.wrapped.symbol] : undefined;
        return {
            key: c,
            platform,
            network: n,
            chainId: toChainId(c),
            finalityThreshold: finality.finalityThreshold.get(c) ?? 0,
            blockTime: finality.blockTime(c),
            contracts: getContracts(n, c),
            nativeTokenDecimals: decimals.nativeDecimals(platform),
            nativeChainId,
            tokenMap,
            wrappedNative,
            explorer: explorer.explorerConfigs(n, c),
            rpc: rpc.rpcAddress(n, c),
        };
    })
        .reduce((acc, curr) => {
        return { ...acc, [curr.key]: curr };
    }, {});
    return cc;
}
//# sourceMappingURL=types.js.map