import { chainToPlatform, isChain, } from "@wormhole-foundation/sdk-base";
const protocolFactory = new Map();
export function registerProtocol(platform, protocol, ctr) {
    let protocols = protocolFactory.get(platform);
    if (!protocols)
        protocols = new Map();
    if (protocols.has(protocol))
        throw new Error(`Protocol ${protocol} for platform ${platform} has already registered`);
    protocols.set(protocol, ctr);
    protocolFactory.set(platform, protocols);
}
export function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = isChain(chainOrPlatform)
        ? chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    const protocols = protocolFactory.get(platform);
    return !!protocols && protocols.has(protocol);
}
export function getProtocolInitializer(platform, protocol) {
    const protocols = protocolFactory.get(platform);
    if (!protocols)
        throw new Error(`No protocols registered for platform ${platform}`);
    const pctr = protocols.get(protocol);
    if (!pctr)
        throw new Error(`No protocol registered for ${platform}:${protocol}`);
    return pctr;
}
export const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
//# sourceMappingURL=protocol.js.map