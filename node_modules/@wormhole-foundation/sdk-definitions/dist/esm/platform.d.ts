import { Chain, Network, Platform, PlatformToChains, ProtocolName } from "@wormhole-foundation/sdk-base";
import { TokenAddress } from "./address";
import { WormholeMessageId } from "./attestation";
import { ChainContext } from "./chain";
import { RpcConnection } from "./rpc";
import { Balances, ChainsConfig, SignedTx, TokenId, TxHash } from "./types";
export interface PlatformUtils<N extends Network, P extends Platform> {
    _platform: P;
    new (network: N, config?: ChainsConfig<N, P>): PlatformContext<N, P>;
    isSupportedChain(chain: Chain): boolean;
    chainFromChainId(chainId: string | bigint): [Network, Chain];
    chainFromRpc(rpc: RpcConnection<P>): Promise<[Network, Chain]>;
    nativeTokenId<N extends Network, C extends PlatformToChains<P>>(network: N, chain: C): TokenId<C>;
    isNativeTokenId<N extends Network, C extends PlatformToChains<P>>(network: N, chain: C, tokenId: TokenId): boolean;
    getDecimals<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, token: TokenAddress<C>): Promise<bigint>;
    getBalance<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, walletAddr: string, token: TokenAddress<C>): Promise<bigint | null>;
    getBalances<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, walletAddress: string, tokens: TokenAddress<C>[]): Promise<Balances>;
    getLatestBlock(rpc: RpcConnection<P>): Promise<number>;
    getLatestFinalizedBlock(rpc: RpcConnection<P>): Promise<number>;
    sendWait<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, stxns: SignedTx[]): Promise<TxHash[]>;
}
export declare abstract class PlatformContext<N extends Network, P extends Platform> {
    readonly network: N;
    readonly config: ChainsConfig<N, P>;
    constructor(network: N, config: ChainsConfig<N, P>);
    utils(): PlatformUtils<N, P>;
    abstract getRpc<C extends PlatformToChains<P>>(chain: C): RpcConnection<P>;
    abstract getChain<C extends PlatformToChains<P>>(chain: C, rpc?: RpcConnection<P>): ChainContext<N, P, C>;
    getProtocol<PN extends ProtocolName, T>(protocol: PN, rpc: RpcConnection<P>): Promise<T>;
    parseWormholeMessages<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, txid: TxHash): Promise<WormholeMessageId[]>;
}
//# sourceMappingURL=platform.d.ts.map