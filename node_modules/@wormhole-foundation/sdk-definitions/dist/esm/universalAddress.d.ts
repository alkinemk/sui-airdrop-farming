import { PlatformAddressFormat } from "@wormhole-foundation/sdk-base";
import { Address, NativeAddress, toNative } from "./address";
export declare class UniversalAddress implements Address {
    static readonly byteSize = 32;
    static readonly type: string;
    private readonly address;
    constructor(address: string | Uint8Array, format?: PlatformAddressFormat);
    toNative<T extends Parameters<typeof toNative>[0]>(chainOrPlatform: T): NativeAddress<T>;
    unwrap(): Uint8Array;
    toString(): string;
    toUint8Array(): Uint8Array;
    toUniversalAddress(): this;
    equals(other: UniversalAddress): boolean;
    static isValidAddress(address: string, format?: PlatformAddressFormat): boolean;
    static instanceof(address: any): address is UniversalAddress;
    private static stringToUint8Array;
}
//# sourceMappingURL=universalAddress.d.ts.map