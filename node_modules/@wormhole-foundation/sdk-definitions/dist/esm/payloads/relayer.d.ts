import { RegisterPayloadTypes } from "../vaa";
declare const namedPayloads: readonly [readonly ["DeliveryInstruction", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "object";
    readonly layout: readonly [{
        readonly custom: {
            to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
            from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") => number;
        };
        readonly binary: "uint";
        readonly size: 2;
        readonly name: "chain";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }];
    readonly name: "target";
}, {
    readonly name: "payload";
    readonly binary: "bytes";
    readonly lengthSize: 4;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "requestedReceiverValue";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "extraReceiverValue";
}, {
    readonly binary: "object";
    readonly layout: readonly [{
        readonly name: "size";
        readonly binary: "uint";
        readonly size: 4;
        readonly custom: number;
        readonly omit: true;
    }, {
        readonly name: "waste";
        readonly binary: "uint";
        readonly size: 31;
        readonly custom: 0n;
        readonly omit: true;
    }, {
        readonly name: "version";
        readonly binary: "uint";
        readonly size: 1;
        readonly custom: 0;
        readonly omit: true;
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "gasLimit";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "targetChainRefundPerGasUnused";
    }];
    readonly name: "executionInfo";
}, {
    readonly binary: "object";
    readonly layout: readonly [{
        readonly custom: {
            to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
            from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") => number;
        };
        readonly binary: "uint";
        readonly size: 2;
        readonly name: "chain";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }];
    readonly name: "refund";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "refundDeliveryProvider";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceDeliveryProvider";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "senderAddress";
}, {
    readonly name: "messageKeys";
    readonly binary: "array";
    readonly lengthSize: 1;
    readonly layout: {
        readonly binary: "switch";
        readonly idSize: 1;
        readonly idTag: "keyType";
        readonly layouts: readonly [readonly [readonly [1, "VAA"], readonly [{
            readonly custom: {
                to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
                from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") => number;
            };
            readonly binary: "uint";
            readonly size: 2;
            readonly name: "chain";
        }, {
            readonly binary: "bytes";
            readonly size: 32;
            readonly custom: {
                to: (val: Uint8Array) => import("..").UniversalAddress;
                from: (val: import("..").UniversalAddress) => Uint8Array;
            };
            readonly name: "emitterAddress";
        }, {
            readonly binary: "uint";
            readonly size: 8;
            readonly name: "sequence";
        }]], readonly [readonly [2, "CCTP"], readonly [{
            readonly name: "size";
            readonly binary: "uint";
            readonly size: 4;
            readonly custom: 12;
            readonly omit: true;
        }, {
            readonly binary: "uint";
            readonly size: 4;
            readonly custom: {
                to: (id: number) => "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base";
                from: (name: "Solana" | "Ethereum" | "Avalanche" | "Arbitrum" | "Optimism" | "Base") => 0 | 1 | 2 | 3 | 5 | 6;
            };
            readonly name: "domain";
        }, {
            readonly binary: "uint";
            readonly size: 8;
            readonly name: "nonce";
        }]]];
    };
}]], readonly ["RedeliveryInstruction", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 2;
    readonly omit: true;
}, {
    readonly name: "deliveryVaaKey";
    readonly binary: "object";
    readonly layout: readonly [{
        readonly custom: {
            to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
            from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") => number;
        };
        readonly binary: "uint";
        readonly size: 2;
        readonly name: "chain";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("..").UniversalAddress;
            from: (val: import("..").UniversalAddress) => Uint8Array;
        };
        readonly name: "emitterAddress";
    }, {
        readonly binary: "uint";
        readonly size: 8;
        readonly name: "sequence";
    }];
}, {
    readonly custom: {
        to: (val: number) => "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky";
        from: (val: "Solana" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Base" | "Sei" | "Rootstock" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky") => number;
    };
    readonly binary: "uint";
    readonly size: 2;
    readonly name: "targetChain";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "newRequestedReceiverValue";
}, {
    readonly binary: "object";
    readonly layout: readonly [{
        readonly name: "size";
        readonly binary: "uint";
        readonly size: 4;
        readonly custom: number;
        readonly omit: true;
    }, {
        readonly name: "waste";
        readonly binary: "uint";
        readonly size: 31;
        readonly custom: 0n;
        readonly omit: true;
    }, {
        readonly name: "version";
        readonly binary: "uint";
        readonly size: 1;
        readonly custom: 0;
        readonly omit: true;
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "gasLimit";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "targetChainRefundPerGasUnused";
    }];
    readonly name: "newEncodedExecutionInfo";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "newSourceDeliveryProvider";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("..").UniversalAddress;
        from: (val: import("..").UniversalAddress) => Uint8Array;
    };
    readonly name: "newSenderAddress";
}]]];
declare global {
    namespace WormholeNamespace {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"Relayer", typeof namedPayloads> {
        }
    }
}
export {};
//# sourceMappingURL=relayer.d.ts.map