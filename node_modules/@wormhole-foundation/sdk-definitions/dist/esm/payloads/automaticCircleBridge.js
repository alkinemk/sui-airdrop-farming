import { payloadIdItem, universalAddressItem, amountItem, circleDomainItem, circleNonceItem, } from "../layout-items";
import { registerPayloadTypes } from "../vaa";
//from here: https://github.com/wormhole-foundation/wormhole-circle-integration/blob/105ad59bad687416527003e0241dee4020889341/evm/src/circle_integration/CircleIntegrationMessages.sol#L25
const depositWithPayloadBase = [
    payloadIdItem(1),
    {
        name: "token",
        binary: "object",
        layout: [
            { name: "address", ...universalAddressItem },
            { name: "amount", ...amountItem },
        ],
    },
    { name: "sourceDomain", ...circleDomainItem },
    { name: "targetDomain", ...circleDomainItem },
    { name: "nonce", ...circleNonceItem },
    { name: "caller", ...universalAddressItem },
    { name: "mintRecipient", ...universalAddressItem },
];
//a future optimization would be to calculate the layout size from the layout itself
//  thought that does require implementing arithmetic on number literals, which is its very
//  own can of worms
export const depositWithSizedLayoutPayload = (byteSize, layout) => [
    ...depositWithPayloadBase,
    { name: "payloadSize", binary: "uint", size: 2, custom: byteSize, omit: true },
    { name: "payload", binary: "object", layout },
];
export const depositWithBytesPayload = (customPayload) => [
    ...depositWithPayloadBase,
    { name: "payload", binary: "bytes", lengthSize: 2, ...customPayload },
];
//from here:
//  https://github.com/wormhole-foundation/example-circle-relayer/blob/189becd8d3935decb17383bd2e61b4909cbddc89/evm/src/circle-relayer/CircleRelayerMessages.sol#L16
export const connectPayload = [
    payloadIdItem(1),
    { name: "targetRelayerFee", ...amountItem },
    { name: "toNativeTokenAmount", ...amountItem },
    { name: "targetRecipient", ...universalAddressItem },
];
export const namedPayloads = [
    ["DepositWithPayload", depositWithBytesPayload({})],
    ["TransferWithRelay", depositWithSizedLayoutPayload(1 + 3 * 32, connectPayload)],
];
registerPayloadTypes("AutomaticCircleBridge", namedPayloads);
//# sourceMappingURL=automaticCircleBridge.js.map