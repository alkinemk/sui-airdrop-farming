import { ProtocolName, Chain, Network, Platform, PlatformToChains, tokens } from "@wormhole-foundation/sdk-base";
import { ChainAddress, TokenAddress, UniversalOrNative } from "./address";
import { WormholeMessageId } from "./attestation";
import { PlatformContext } from "./platform";
import { AutomaticCircleBridge, CircleBridge } from "./protocols/circleBridge";
import { WormholeCore } from "./protocols/core";
import { IbcBridge } from "./protocols/ibc";
import { AutomaticTokenBridge, TokenBridge } from "./protocols/tokenBridge";
import { RpcConnection } from "./rpc";
import { ChainConfig, SignedTx, TokenId } from "./types";
export declare abstract class ChainContext<N extends Network, P extends Platform = Platform, C extends Chain = PlatformToChains<P>> {
    readonly network: N;
    readonly platform: PlatformContext<N, P>;
    readonly chain: C;
    readonly config: ChainConfig<N, C>;
    protected rpc?: RpcConnection<P>;
    protected coreBridge?: WormholeCore<N, P, C>;
    protected tokenBridge?: TokenBridge<N, P, C>;
    protected autoTokenBridge?: AutomaticTokenBridge<N, P, C>;
    protected circleBridge?: CircleBridge<N, P, C>;
    protected autoCircleBridge?: AutomaticCircleBridge<N, P, C>;
    protected ibcBridge?: IbcBridge<N, P, C>;
    constructor(chain: C, platform: PlatformContext<N, P>, rpc?: RpcConnection<P>);
    getRpc(): Promise<RpcConnection<P>>;
    getDecimals(token: TokenAddress<C>): Promise<bigint>;
    getBalance(walletAddr: string, token: TokenAddress<C>): Promise<bigint | null>;
    getLatestBlock(): Promise<number>;
    getLatestFinalizedBlock(): Promise<number>;
    parseTransaction(txid: string): Promise<WormholeMessageId[]>;
    sendWait(stxns: SignedTx): Promise<string[]>;
    getToken(symbol: tokens.TokenSymbol): tokens.Token | undefined;
    getNativeWrappedTokenId(): Promise<TokenId<C>>;
    getTokenAccount(address: UniversalOrNative<C>, token: UniversalOrNative<C>): Promise<ChainAddress<C>>;
    supportsProtocol(protocolName: ProtocolName): boolean;
    supportsWormholeCore: () => boolean;
    getWormholeCore(): Promise<WormholeCore<N, P, C>>;
    supportsTokenBridge: () => boolean;
    getTokenBridge(): Promise<TokenBridge<N, P, C>>;
    supportsAutomaticTokenBridge: () => boolean;
    getAutomaticTokenBridge(): Promise<AutomaticTokenBridge<N, P, C>>;
    supportsCircleBridge: () => boolean;
    getCircleBridge(): Promise<CircleBridge<N, P, C>>;
    supportsAutomaticCircleBridge: () => boolean;
    getAutomaticCircleBridge(): Promise<AutomaticCircleBridge<N, P, C>>;
    supportsIbcBridge: () => boolean;
    getIbcBridge(): Promise<IbcBridge<N, P, C>>;
}
//# sourceMappingURL=chain.d.ts.map