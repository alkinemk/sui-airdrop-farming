import { LayoutToType, Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import { AccountAddress, ChainAddress, TokenAddress } from "../address";
import "../payloads/portico";
import { porticoFlagSetLayout, porticoPayloadLayout } from "../payloads/portico";
import { EmptyPlatformMap } from "../protocol";
import { TokenId } from "../types";
import { UnsignedTransaction } from "../unsignedTransaction";
import { ProtocolVAA } from "../vaa";
declare global {
    namespace WormholeNamespace {
        interface ProtocolToPlatformMapping {
            PorticoBridge: EmptyPlatformMap<Platform, PorticoBridge.ProtocolName>;
        }
    }
}
export declare namespace PorticoBridge {
    const _protocol = "PorticoBridge";
    export type ProtocolName = typeof _protocol;
    export interface SwapAmounts {
        minAmountStart: bigint;
        minAmountFinish: bigint;
        amountFinish: bigint;
    }
    export type Quote = {
        swapAmounts: SwapAmounts;
        relayerFee: bigint;
    };
    const _transferPayloads: readonly ["Transfer"];
    const _payloads: readonly ["Transfer"];
    export type TransferPayloadNames = (typeof _transferPayloads)[number];
    export type PayloadNames = (typeof _payloads)[number];
    export type VAA<PayloadName extends PayloadNames = PayloadNames> = ProtocolVAA<ProtocolName, PayloadName>;
    export type Payload = LayoutToType<typeof porticoPayloadLayout>;
    export type FlagSet = LayoutToType<typeof porticoFlagSetLayout>;
    export const deserializePayload: (data: Uint8Array) => PorticoBridge.Payload;
    export const serializePayload: (msg: PorticoBridge.Payload) => Uint8Array;
    export const deserializeFlagSet: (data: Uint8Array) => FlagSet;
    export const serializeFlagSet: (flags: FlagSet) => Uint8Array;
    export {};
}
export interface PorticoBridge<N extends Network, P extends Platform, C extends PlatformToChains<P>> {
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, token: TokenAddress<C>, amount: bigint, destToken: TokenId | "native", quote: PorticoBridge.Quote): AsyncGenerator<UnsignedTransaction<N, C>>;
    redeem(sender: AccountAddress<C>, vaa: PorticoBridge.VAA): AsyncGenerator<UnsignedTransaction<N, C>>;
    quoteSwap(input: TokenAddress<C>, output: TokenAddress<C>, amount: bigint): Promise<bigint>;
    quoteRelay(token: TokenAddress<C>, destination: TokenAddress<C>): Promise<bigint>;
    getTransferrableToken(address: string): TokenId;
}
//# sourceMappingURL=portico.d.ts.map