"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.getProtocolInitializer = exports.protocolIsRegistered = exports.registerProtocol = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const protocolFactory = new Map();
function registerProtocol(platform, protocol, ctr) {
    let protocols = protocolFactory.get(platform);
    if (!protocols)
        protocols = new Map();
    if (protocols.has(protocol))
        throw new Error(`Protocol ${protocol} for platform ${platform} has already registered`);
    protocols.set(protocol, ctr);
    protocolFactory.set(platform, protocols);
}
exports.registerProtocol = registerProtocol;
function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = (0, sdk_base_1.isChain)(chainOrPlatform)
        ? sdk_base_1.chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    const protocols = protocolFactory.get(platform);
    return !!protocols && protocols.has(protocol);
}
exports.protocolIsRegistered = protocolIsRegistered;
function getProtocolInitializer(platform, protocol) {
    const protocols = protocolFactory.get(platform);
    if (!protocols)
        throw new Error(`No protocols registered for platform ${platform}`);
    const pctr = protocols.get(protocol);
    if (!pctr)
        throw new Error(`No protocol registered for ${platform}:${protocol}`);
    return pctr;
}
exports.getProtocolInitializer = getProtocolInitializer;
const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
exports.create = create;
//# sourceMappingURL=protocol.js.map