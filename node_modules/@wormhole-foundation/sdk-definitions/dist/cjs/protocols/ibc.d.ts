import { Chain, ChainId, Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import { AccountAddress, ChainAddress, NativeAddress, TokenAddress } from "../address";
import { IbcMessageId, WormholeMessageId } from "../attestation";
import { TokenId, TxHash } from "../types";
import { UnsignedTransaction } from "../unsignedTransaction";
export type GatewayTransferDetails = {
    token: TokenId<Chain> | "native";
    amount: bigint;
    from: ChainAddress;
    to: ChainAddress;
    nonce?: number;
    fee?: bigint;
    payload?: Uint8Array;
    nativeGas?: bigint;
};
export interface GatewayMsg {
    chain: ChainId;
    recipient: string;
    fee: string;
    nonce: number;
    payload?: string;
}
export interface GatewayTransferMsg {
    gateway_transfer: Exclude<GatewayMsg, "payload">;
}
export interface GatewayTransferWithPayloadMsg {
    gateway_transfer_with_payload: GatewayMsg;
}
export interface GatewayIbcTransferMsg {
    gateway_ibc_token_bridge_payload: GatewayTransferMsg | GatewayTransferWithPayloadMsg;
}
export declare function isGatewayTransferMsg(thing: GatewayTransferMsg | any): thing is GatewayTransferMsg;
export declare function isGatewayTransferWithPayloadMsg(thing: GatewayTransferWithPayloadMsg | any): thing is GatewayTransferWithPayloadMsg;
export declare function isGatewayIbcTransferMsg(thing: GatewayIbcTransferMsg | any): thing is GatewayIbcTransferMsg;
export declare function isGatewayTransferDetails(thing: GatewayTransferDetails | any): thing is GatewayTransferDetails;
export declare function toGatewayMsg(msg: GatewayTransferMsg | GatewayTransferWithPayloadMsg | GatewayIbcTransferMsg | string): GatewayMsg;
export declare function gatewayTransferMsg(gtd: GatewayTransferDetails | GatewayMsg): GatewayTransferMsg | GatewayTransferWithPayloadMsg;
export declare function makeGatewayTransferMsg<CN extends Chain>(chain: CN, recipient: NativeAddress<CN> | string, fee: bigint | undefined, nonce: number, payload?: string): GatewayTransferWithPayloadMsg | GatewayTransferMsg;
export interface IbcTransferInfo {
    id: IbcMessageId;
    data: IbcTransferData;
    pending: boolean;
}
export declare function isIbcTransferInfo(thing: IbcTransferInfo | any): thing is IbcTransferInfo;
export interface IbcTransferData {
    amount: string;
    denom: string;
    memo: string;
    receiver: string;
    sender: string;
}
export interface IbcBridge<N extends Network, P extends Platform, C extends PlatformToChains<P>> {
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, token: TokenAddress<C>, amount: bigint, payload?: Uint8Array): AsyncGenerator<UnsignedTransaction<N, C>>;
    getTransferChannel(chain: Chain): string | null;
    fetchTransferChannel(chain: Chain): Promise<string | null>;
    lookupMessageFromIbcMsgId(msg: IbcMessageId): Promise<WormholeMessageId | null>;
    lookupTransferFromTx(txid: TxHash): Promise<IbcTransferInfo>;
    lookupTransferFromIbcMsgId(msg: IbcMessageId): Promise<IbcTransferInfo>;
    lookupTransferFromMsg(payload: GatewayTransferMsg | GatewayTransferWithPayloadMsg): Promise<IbcTransferInfo>;
}
//# sourceMappingURL=ibc.d.ts.map