import { Network, Chain } from "@wormhole-foundation/sdk-base";
import { SignedTx, TxHash } from "./types";
import { UnsignedTransaction } from "./unsignedTransaction";
export type Signer<N extends Network = Network, C extends Chain = Chain> = SignOnlySigner<N, C> | SignAndSendSigner<N, C>;
export declare function isSigner(thing: any): thing is Signer<Network, Chain>;
interface SignerBase<C extends Chain> {
    chain(): C;
    address(): string;
}
export interface SignOnlySigner<N extends Network, C extends Chain> extends SignerBase<C> {
    sign(tx: UnsignedTransaction<N, C>[]): Promise<SignedTx[]>;
}
export declare function isSignOnlySigner(thing: any): thing is SignOnlySigner<Network, Chain>;
export interface SignAndSendSigner<N extends Network, C extends Chain> extends SignerBase<C> {
    signAndSend(tx: UnsignedTransaction<N, C>[]): Promise<TxHash[]>;
}
export declare function isSignAndSendSigner(thing: any): thing is SignAndSendSigner<Network, Chain>;
export {};
//# sourceMappingURL=signer.d.ts.map