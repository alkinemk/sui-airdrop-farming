import { Chain, ProtocolName } from "@wormhole-foundation/sdk-base";
import { SequenceId } from "./types";
import { UniversalAddress } from "./universalAddress";
import { VAA } from "./vaa";
import { AutomaticTokenBridge, TokenBridge } from "./protocols/tokenBridge";
import { AutomaticCircleBridge, CircleBridge } from "./protocols/circleBridge";
import { IbcTransferData } from "./protocols/ibc";
export type AttestationId<PN extends ProtocolName = ProtocolName> = PN extends "TokenBridge" | "AutomaticTokenBridge" | "AutomaticCircleBridge" ? WormholeMessageId : PN extends "CircleBridge" ? CircleMessageId : PN extends "IbcBridge" ? IbcMessageId : never;
export type Attestation<PN extends ProtocolName = ProtocolName> = PN extends "TokenBridge" | "AutomaticTokenBridge" ? AutomaticTokenBridge.VAA | TokenBridge.VAA : PN extends "AutomaticCircleBridge" ? AutomaticCircleBridge.VAA : PN extends "CircleBridge" ? CircleBridge.Attestation : PN extends "IbcBridge" ? IbcTransferData : never;
export type AttestationReceipt<PN extends ProtocolName = ProtocolName> = {
    id: AttestationId<PN>;
    attestation?: Attestation<PN>;
};
export type WormholeMessageId = {
    chain: Chain;
    emitter: UniversalAddress;
    sequence: SequenceId;
};
export declare function isWormholeMessageId(thing: WormholeMessageId | any): thing is WormholeMessageId;
export type getWormholeAttestation = (id: WormholeMessageId) => Promise<VAA>;
export type CircleMessageId = {
    hash: string;
};
export declare function isCircleMessageId(thing: CircleMessageId | any): thing is CircleMessageId;
export type CircleAttestation = string;
export type getCircleAttestation = (id: CircleMessageId) => Promise<CircleAttestation>;
export type IbcMessageId = {
    chain: Chain;
    srcPort: string;
    srcChannel: string;
    dstPort: string;
    dstChannel: string;
    sequence: number;
};
export declare function isIbcMessageId(thing: IbcMessageId | any): thing is IbcMessageId;
//# sourceMappingURL=attestation.d.ts.map