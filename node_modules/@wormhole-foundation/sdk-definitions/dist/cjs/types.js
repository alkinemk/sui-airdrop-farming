"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildConfig = exports.isTransactionIdentifier = exports.isTokenId = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const contracts_1 = require("./contracts");
function isTokenId(thing) {
    return (typeof thing === "object" &&
        typeof thing.address !== undefined &&
        (0, sdk_base_1.isChain)(thing.chain));
}
exports.isTokenId = isTokenId;
function isTransactionIdentifier(thing) {
    return thing.chain !== undefined && thing.txid !== undefined;
}
exports.isTransactionIdentifier = isTransactionIdentifier;
function buildConfig(n) {
    const cc = sdk_base_1.chains
        .map((c) => {
        const platform = (0, sdk_base_1.chainToPlatform)(c);
        let nativeChainId = "";
        try {
            nativeChainId = sdk_base_1.nativeChainIds.networkChainToNativeChainId.get(n, c);
        }
        catch { }
        const tokenMap = sdk_base_1.tokens.getTokenMap(n, c);
        const nativeToken = tokenMap
            ? Object.values(tokenMap).find((token) => token.address === "native" && token.wrapped)
            : undefined;
        const wrappedNative = nativeToken ? tokenMap[nativeToken.wrapped.symbol] : undefined;
        return {
            key: c,
            platform,
            network: n,
            chainId: (0, sdk_base_1.toChainId)(c),
            finalityThreshold: sdk_base_1.finality.finalityThreshold.get(c) ?? 0,
            blockTime: sdk_base_1.finality.blockTime(c),
            contracts: (0, contracts_1.getContracts)(n, c),
            nativeTokenDecimals: sdk_base_1.decimals.nativeDecimals(platform),
            nativeChainId,
            tokenMap,
            wrappedNative,
            explorer: sdk_base_1.explorer.explorerConfigs(n, c),
            rpc: sdk_base_1.rpc.rpcAddress(n, c),
        };
    })
        .reduce((acc, curr) => {
        return { ...acc, [curr.key]: curr };
    }, {});
    return cc;
}
exports.buildConfig = buildConfig;
//# sourceMappingURL=types.js.map