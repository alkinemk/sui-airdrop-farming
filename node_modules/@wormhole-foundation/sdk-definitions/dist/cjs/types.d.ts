import { Chain, ChainToPlatform, Network, Platform, PlatformToChains, explorer, tokens } from "@wormhole-foundation/sdk-base";
import { ChainAddress } from "./address";
import { Contracts } from "./contracts";
export type TxHash = string;
export type SequenceId = bigint;
export type SignedTx = any;
export type TokenId<C extends Chain = Chain> = ChainAddress<C>;
export declare function isTokenId<C extends Chain>(thing: any): thing is TokenId<C>;
export type Balances = {
    [key: string]: bigint | null;
};
export type TransactionId<C extends Chain = Chain> = {
    chain: C;
    txid: TxHash;
};
export declare function isTransactionIdentifier(thing: TransactionId | any): thing is TransactionId;
export type ChainConfig<N extends Network, C extends Chain> = {
    key: C;
    network: N;
    platform: ChainToPlatform<C>;
    chainId: number;
    contracts: Contracts;
    finalityThreshold: number;
    blockTime: number;
    nativeTokenDecimals: number;
    nativeChainId: string | bigint;
    rpc: string;
    tokenMap?: tokens.ChainTokens;
    wrappedNative?: tokens.Token;
    explorer?: explorer.ExplorerSettings;
};
export type ChainsConfig<N extends Network, P extends Platform> = {
    [K in PlatformToChains<P>]?: ChainConfig<N, K>;
};
export declare function buildConfig<N extends Network>(n: N): ChainsConfig<N, Platform>;
//# sourceMappingURL=types.d.ts.map