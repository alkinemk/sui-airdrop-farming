"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsTransferCompleted = void 0;
const utils_1 = require("./utils");
const connect_sdk_1 = require("@wormhole-foundation/connect-sdk");
async function getIsTransferCompleted(provider, tokenBridgeStateObjectId, transferVAA) {
    const tokenBridgeStateFields = await (0, utils_1.getObjectFields)(provider, tokenBridgeStateObjectId);
    if (!tokenBridgeStateFields) {
        throw new Error('Unable to fetch object fields from token bridge state');
    }
    const hashes = tokenBridgeStateFields.consumed_vaas?.fields?.hashes;
    const tableObjectId = hashes?.fields?.items?.fields?.id?.id;
    if (!tableObjectId) {
        throw new Error('Unable to fetch consumed VAAs table');
    }
    const keyType = (0, utils_1.getTableKeyType)(hashes?.fields?.items?.type);
    if (!keyType) {
        throw new Error('Unable to get key type');
    }
    const hash = (0, connect_sdk_1.getSignedVAAHash)(transferVAA);
    const response = await provider.getDynamicFieldObject({
        parentId: tableObjectId,
        name: {
            type: keyType,
            value: {
                data: [...Buffer.from(hash.slice(2), 'hex')],
            },
        },
    });
    if (!response.error) {
        return true;
    }
    if (response.error.code === 'dynamicFieldNotFound') {
        return false;
    }
    throw new Error(`Unexpected getDynamicFieldObject response ${response.error}`);
}
exports.getIsTransferCompleted = getIsTransferCompleted;
//# sourceMappingURL=isTransferComplete.js.map